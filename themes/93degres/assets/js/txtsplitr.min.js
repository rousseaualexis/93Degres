function SplitText(identifier, vars){
var rx = /([\uD800-\uDBFF][\uDC00-\uDFFF](?:[\u200D\uFE0F][\uD800-\uDBFF][\uDC00-\uDFFF]){2,}|\uD83D\uDC69(?:\u200D(?:(?:\uD83D\uDC69\u200D)?\uD83D\uDC67|(?:\uD83D\uDC69\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D(?:\uD83D\uDC69\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]\uFE0F|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC6F\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3C-\uDD3E\uDDD6-\uDDDF])\u200D[\u2640\u2642]\uFE0F|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F\u200D[\u2640\u2642]|(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642])\uFE0F|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\uD83D\uDC69\u200D[\u2695\u2696\u2708]|\uD83D\uDC68(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708]))\uFE0F|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83D\uDC69\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|\uD83D\uDC68(?:\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66\u200D\uD83D\uDC66|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92])|(?:\uD83C[\uDFFB-\uDFFF])\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]))|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDD1-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\u200D(?:(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC67|(?:(?:\uD83D[\uDC68\uDC69])\u200D)?\uD83D\uDC66)|\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC69\uDC6E\uDC70-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD18-\uDD1C\uDD1E\uDD1F\uDD26\uDD30-\uDD39\uDD3D\uDD3E\uDDD1-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])?|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDEEB\uDEEC\uDEF4-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267B\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEF8]|\uD83E[\uDD10-\uDD3A\uDD3C-\uDD3E\uDD40-\uDD45\uDD47-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6])\uFE0F)/;

	function duplicateObject(obj){
		if(typeof obj == "object" && obj !== null){
			var ret = {};
			for(var index in obj){
				ret[index] = duplicateObject(obj[index]);
			}
			return ret;
		} else {
			return obj;
		}
	}

	String.prototype.replaceAll = function(search, replacement) {
	    var target = this;
	    return target.split(search).join(replacement);
	};



	function hasClass(obj, c) {
	  return new RegExp('(\\s|^)' + c + '(\\s|$)').test(obj.className);
	}

	function addClass(obj, c) {
	  if (!hasClass(obj, c)) {
	    obj.className += ' ' + c;
	  }
	}

	function removeClass(obj, c) {
	  if (hasClass(obj, c)) {
	    obj.className = obj.className.replace(new RegExp('(\\s|^)' + c + '(\\s|$)'), ' ').replace(/\s+/g, ' ').replace(/^\s|\s$/, '');
	  }
	}

	function findPos(node) {
	    var node = node; 	
	    var curtop = 0;
	    var curtopscroll = 0;
	    var curleft = 0;
	    var curleftscroll = 0;
	    //var needHTML = true;
	    if (node.offsetParent) {
	        do {
	        	if(node.offsetParent && node.offsetParent == document.getElementsByTagName("html")[0]){
	        		// needHTML = false;
	        	}
	            curtop += node.offsetTop;
	            curtopscroll += node.offsetParent ? node.offsetParent.scrollTop : 0;
	            curleft += node.offsetLeft;
	            curleftscroll += node.offsetParent ? node.offsetParent.scrollLeft : 0;

	        } while (node = node.offsetParent);

	        // if(needHTML){
	        // 	curtopscroll += document.getElementsByTagName("html")[0].scrollTop;
	        // 	curleftscroll += document.getElementsByTagName("html")[0].scrollLeft;
	        // }
	        


	        return [curleft - curleftscroll, curtop - curtopscroll];
	    }
	}

	var identifier = identifier || [];
	var defaults = {
		type: "chars,words,lines",
		charsClass: undefined,
		linesClass: "test",
		wordsClass: undefined,
		position: "relative"
	};


	this.HTMLobjects=[];
	this.vars = {};
	this.originalHTML = [];

	this.lines = [];
	this.words = [];
	this.chars = [];

	//if the identifier isn't an array, make it one.  If it already is, don't worry.  :)
	if(!Array.isArray(identifier)){
		identifier = [identifier];
	}

	//itterate through the array
	for(var i = 0;i<identifier.length;i++){
		
		
		//if it is an html element, simply add it
		if(identifier[i].nodeType==1){
			this.HTMLobjects.push(identifier[i]);
		}

		//if jquery Element add each html Element
		if (window.jQuery && identifier[i] && (identifier[i] instanceof jQuery || identifier[i].constructor.prototype.jquery)) {
			//itterate through array of html elements inside jquery object
			for(var j = 0; j<identifier[i].length;j++){
				//Check that it is an html element before appending it
				if(identifier[i][j].nodeType==1){
					this.HTMLobjects.push(identifier[i][j]);
				}
			}
		}

		//if it's a string, try query selector all
		if(typeof identifier[i] == "string"){
			elements = document.querySelectorAll(identifier[i]);
			for(var j = 0; j<elements.length;j++){
				if(elements[j].nodeType==1){
					this.HTMLobjects.push(elements[j]);
				}
			}
		}

	}

	//if there is an object of variables replace defaults otherwise use defaults
	if(vars && typeof vars == "object" && vars !== null){

		//if type is passed and it's a string, try and validate otherwise use default
		if(vars.type && typeof vars.type == "string"){
			vars.type = vars.type.split(",");
			var possible = ["chars","words","lines"];
			var use = [];
			for(var i = 0;i<vars.type.length;i++){
				if(possible.indexOf(vars.type[i].toLowerCase())!=-1 && use.indexOf(vars.type[i].toLowerCase())==-1){
					use.push(vars.type[i].toLowerCase());
				} else {
					console.error(vars.type[i] + "is not a valid type");
				}
			}

			if(use.length==0){
				this.vars.type = defaults.type;
			} else {
				this.vars.type = use.join(",");
			}


		} else {
			this.vars.type = defaults.type;
		}


		//if charsClass is set then use it
		this.vars.charsClass = (vars.charsClass && typeof vars.charsClass == "string")?vars.charsClass:defaults.charsClass;

		//if wordsClass is set then use it
		this.vars.wordsClass = (vars.wordsClass && typeof vars.wordsClass == "string")?vars.wordsClass:defaults.wordsClass;

		//if linesClass is set then use it
		this.vars.linesClass = (vars.linesClass && typeof vars.linesClass == "string")?vars.linesClass:defaults.linesClass;

		//greensock's splittext doesn't allow static or null.  null will not set position and leave it to any css on the page
		var allowedPositions = ["absolute","relative","static","fixed","inherit","initial",null];
		this.vars.position = (vars.position && allowedPositions.indexOf(vars.position)!=-1)?vars.position:defaults.position;
	}else{
		this.vars = duplicateObject(defaults);
	}

	//Store the original state so we can revert easily
	for(var i = 0;i<this.HTMLobjects.length;i++){
		this.originalHTML[i]=this.HTMLobjects[i].innerHTML;
	}

	//add the revert function
	this.revert = function(){
		for(var i = 0;i<this.HTMLobjects.length;i++){
			this.HTMLobjects[i].innerHTML=this.originalHTML[i];
		}
	}


	//
	//By now we should have an array at this.HTMLobjects of html objects that need spliting.
	//	

	//regex match spaces and non space characters
	//can't use this for 
	var regex = {
		wordbreak: / /gm,
		charbreak: /[^\s]/gm
	}

	this.vars.type = this.vars.type.split(",");

	for(var i = 0;i<this.HTMLobjects.length;i++){
			
		var current = this.HTMLobjects[i];

		//remove tags from element
		//ideally, this won't be needed in the future
		current.innerHTML = current.innerHTML.replace(/<\/?[^>]+(>|$)/g, "");

		var currentLists = {
			lines:[],
			words:[],
			chars:[]
		};

		//Split Lines
		if(this.vars.type.indexOf("lines")!=-1){
			var text = current.innerHTML;
			var words = text.split(' ');
			var splitPoints = [];
			current.innerHTML = words[0];
			var height = current.offsetHeight;

			//work out where the splits are
			for(var j = 1; j < words.length; j++){
			    current.innerHTML = current.innerHTML + ' ' + words[j];
			    if(current.offsetHeight > height){
			        height = current.offsetHeight;
			        splitPoints.push(current.innerHTML.length - (words[j].length+1));
			    }
			}
			//add the last line
			splitPoints.push(current.innerHTML.length);

			//add the text to the element, adding in the tags

			current.innerHTML = "";


			for(var j = 0; j < splitPoints.length; j++){
			   	var lineStart = (j==0)?0:splitPoints[j-1]+1;
			   	var lineEnd = (j==splitPoints.length-1)?text.length:splitPoints[j];


			   	var div = document.createElement("div");
			   	if(this.vars.linesClass!==undefined && this.vars.linesClass!="undefined"){
			   		addClass(this, vars.linesClass);
			   	}
			   	div.innerHTML = text.substring(lineStart,lineEnd)
			   	current.appendChild(div);


			   	if(this.vars.position !== null){
			   		if(this.vars.position =="absolute"){
			   			div.toBe = {
			   				top: div.offsetTop,
			   				left: div.offsetLeft
			   			};
			   			div.style.position = "relative";
			   		} else if(this.vars.position =="fixed"){
			   			var pos = findPos(div);
			   			div.toBe = {
			   				top: pos[1],
			   				left: pos[0]
			   			}
			   			div.style.position = "relative";
			   		} else {
			   			div.style.position = this.vars.position;
			   		}
			   	}

			   	currentLists.lines.push(div);

			}

			
		}






		//split the words
		if(this.vars.type.indexOf("words")!=-1){
			function splitWords(parent,st){
				var startTag = "<div style='display:inline-block;'>";
				var endTag = "</div>";
				parent.innerHTML = startTag + parent.innerHTML.replaceAll(" ",(endTag+ " " +startTag)) + endTag;

				var nodes = parent.querySelectorAll("div");

				for(var j = 0; j<nodes.length;j++){
					if(st.vars.wordsClass!==undefined && st.vars.wordsClass!="undefined"){
						addClass(nodes[j],st.vars.wordsClass.replaceAll("++",j+1));
					}

					if(st.vars.position !== null){
				   		if(st.vars.position =="absolute"){
				   			nodes[j].toBe = {
				   				top: nodes[j].offsetTop,
				   				left: nodes[j].offsetLeft
				   			};
				   			nodes[j].style.position = "relative";
				   		} else if(st.vars.position =="fixed"){
				   			var pos = findPos(nodes[j]);
				   			nodes[j].toBe = {
				   				top: pos[1],
				   				left: pos[0]
				   			}
				   			nodes[j].style.position = "relative";
				   		} else {
				   			nodes[j].style.position = st.vars.position;
				   		}
			   		}

					currentLists.words.push(nodes[j]);
				}
			}

			//if it has been split by lines, split each line by words
			if(this.vars.type.indexOf("lines")!=-1){
				for(var j = 0; j<currentLists.lines.length;j++){
					splitWords(currentLists.lines[j], this);
				}
			} else {
				splitWords(current, this);
			}
		}



		//split the characters
		if(this.vars.type.indexOf("chars")!=-1){
			function splitChars(parent,st){
				var startTag = "<div style='display:inline-block;'>";
				var endTag = "</div>";
				var specials = (parent.innerHTML.match(/(&\w+;)/g));
				parent.innerHTML = startTag + parent.innerHTML.replace(/&\w+;/g,"ህ").split(rx).join(endTag+startTag) + endTag;

				var nodes = parent.querySelectorAll("div");

				for(var j = 0; j<nodes.length;j++){
					if(st.vars.charsClass!==undefined && st.vars.charsClass!="undefined"){
						var newClass = st.vars.charsClass.replaceAll("++",j+1);
						if(j!=nodes.length-1){
							newClass = newClass.replaceAll("**",nodes[j].innerHTML+nodes[j+1].innerHTML);
						} else {
							newClass=newClass.replaceAll("**","");
						}
						addClass(nodes[j],newClass);
					}

					if(st.vars.position !== null){
				   		if(st.vars.position =="absolute"){
				   			nodes[j].toBe = {
				   				top: nodes[j].offsetTop,
				   				left: nodes[j].offsetLeft
				   			};
				   			nodes[j].style.position = "relative";
				   		} else if(st.vars.position =="fixed"){
				   			var pos = findPos(nodes[j]);
				   			nodes[j].toBe = {
				   				top: pos[1],
				   				left: pos[0]
				   			}
				   			nodes[j].style.position = "relative";
				   		} else {
				   			nodes[j].style.position = st.vars.position;
				   		}
			   		}

			   		if(nodes[j].innerHTML=="ህ"){
			   			nodes[j].innerHTML = specials[0];
			   			specials.splice(0,1);
			   		}

					currentLists.chars.push(nodes[j]);
				}

			}

			//if it has been split by words, split each word by characters
			//if it has only be split by lines, split each line by characters
			if(this.vars.type.indexOf("words")!=-1){
				for(var j = 0; j<currentLists.words.length;j++){
					splitChars(currentLists.words[j], this);
				}
			} else if(this.vars.type.indexOf("lines")!=-1){
				for(var j = 0; j<currentLists.lines.length;j++){
					splitChars(currentLists.lines[j], this);
				}
			} else {
				splitChars(current, this);
			}


		}


		if(this.vars.position == "absolute" || this.vars.position == "fixed"){
			for (var j = currentLists.chars.length - 1; j >= 0; j--) {
				currentLists.chars[j].style.width = currentLists.chars[j].offsetWidth + "px";
				currentLists.chars[j].style.height = currentLists.chars[j].offsetHeight + "px";
				currentLists.chars[j].style.left = currentLists.chars[j].toBe.left + "px";
				currentLists.chars[j].style.top = currentLists.chars[j].toBe.top + "px";
			}

			for (var j = currentLists.words.length - 1; j >= 0; j--) {
				currentLists.words[j].style.width = currentLists.words[j].offsetWidth + "px";
				currentLists.words[j].style.height = currentLists.words[j].offsetHeight + "px";
				currentLists.words[j].style.left = currentLists.words[j].toBe.left + "px";
				currentLists.words[j].style.top = currentLists.words[j].toBe.top + "px";
			}

			for (var j = currentLists.lines.length - 1; j >= 0; j--) {
				currentLists.lines[j].style.width = currentLists.lines[j].offsetWidth + "px";
				currentLists.lines[j].style.height = currentLists.lines[j].offsetHeight + "px";
				currentLists.lines[j].style.left = currentLists.lines[j].toBe.left + "px";
				currentLists.lines[j].style.top = currentLists.lines[j].toBe.top + "px";
			}

			for (var j = currentLists.chars.length - 1; j >= 0; j--) {
				currentLists.chars[j].style.position = this.vars.position;
			}

			for (var j = currentLists.words.length - 1; j >= 0; j--) {
				currentLists.words[j].style.position = this.vars.position;
			}

			for (var j = currentLists.lines.length - 1; j >= 0; j--) {
				currentLists.lines[j].style.position = this.vars.position;
			}
		}
		


		this.lines = this.lines.concat(currentLists.lines);
		this.words = this.words.concat(currentLists.words);
		this.chars = this.chars.concat(currentLists.chars);

	}
}